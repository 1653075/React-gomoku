{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","backgroundColor","bgColor","value","Board","i","bgcolor","this","squares","rowArr","diagCounter","boardSize","boardRow","j","console","log","winIndex","winState","winSize","push","renderSquare","React","Component","Game","state","history","Array","fill","moveArr","stepNumber","xIsNext","colArr","diagArr","antidiagArr","handleChangeBoardSize","bind","handleSubmitBoardSize","handleChangeWinSize","handleSubmitWinSize","event","setState","parseInt","target","alert","preventDefault","updateGameSize","slice","length","rowSquares","colSquares","diagSquares","antiDiagSquares","calcWinner","addInRow","addInCol","addInDiag","addInAntiDiag","concat","step","boardSquares","index","rootIndex","rowIndex","Math","floor","winsize","weight","status","current","winner","abs","checkWinIndex","checkWinState","moves","map","move","row","col","moveCheck","desc","key","fontWeight","jumpTo","isDraw","onSubmit","type","onChange","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.533a8dbd.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick} style={{backgroundColor: props.bgColor}}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n  \r\nclass Board extends React.Component {\r\n    renderSquare(i, bgcolor) {\r\n        return (\r\n            <Square \r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n                bgColor={bgcolor}\r\n            />\r\n        );\r\n    }\r\n  \r\n    render() {\r\n      const rowArr = [];\r\n      let diagCounter = 0;\r\n\r\n      for (var i = 0; i<this.props.boardSize; i++) {\r\n        let boardRow = [];\r\n        var j = 0;\r\n        console.log(this.props.winIndex + ' ' + this.props.winState);\r\n\r\n        switch (this.props.winState) {\r\n          case 0: {\r\n            for (j = 0; j<this.props.boardSize; j++) {\r\n              if (i*this.props.boardSize+j >= this.props.winIndex && (i*this.props.boardSize+j < this.props.winIndex + this.props.winSize)) {\r\n                boardRow.push(this.renderSquare(i*this.props.boardSize+j, \"#00e673\"));\r\n              } else {\r\n                boardRow.push(this.renderSquare(i*this.props.boardSize+j, \"#ffffff\"));\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case 1: {\r\n            for (j = 0; j<this.props.boardSize; j++) {\r\n              if (((i*this.props.boardSize+j)%this.props.boardSize === this.props.winIndex%this.props.boardSize ) &&\r\n                  (i*this.props.boardSize+j >= this.props.winIndex) &&\r\n                  (i*this.props.boardSize+j <= this.props.winIndex + (this.props.boardSize - 1) * this.props.winSize)) {\r\n                boardRow.push(this.renderSquare(i*this.props.boardSize+j, \"#00e673\"));\r\n              } else {\r\n                boardRow.push(this.renderSquare(i*this.props.boardSize+j, \"#ffffff\"));\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (j = 0; j<this.props.boardSize; j++) {\r\n              if ((i*this.props.boardSize+j === (this.props.winIndex + this.props.boardSize*diagCounter + diagCounter)) &&\r\n                  (i*this.props.boardSize+j >= this.props.winIndex) &&\r\n                  (i*this.props.boardSize+j <= this.props.winIndex + (this.props.boardSize - 1) * this.props.winSize)) {\r\n                boardRow.push(this.renderSquare(i*this.props.boardSize+j, \"#00e673\"));\r\n                diagCounter++;\r\n              } else {\r\n                boardRow.push(this.renderSquare(i*this.props.boardSize+j, \"#ffffff\"));\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case 3: {\r\n            for (j = 0; j<this.props.boardSize; j++) {\r\n              if ((i*this.props.boardSize+j === (this.props.winIndex + this.props.boardSize*diagCounter - diagCounter)) &&\r\n                  (i*this.props.boardSize+j >= this.props.winIndex) &&\r\n                  (i*this.props.boardSize+j < this.props.winIndex + (this.props.boardSize - 1) * this.props.winSize)) {\r\n                boardRow.push(this.renderSquare(i*this.props.boardSize+j, \"#00e673\"));\r\n                diagCounter++;\r\n              } else {\r\n                boardRow.push(this.renderSquare(i*this.props.boardSize+j, \"#ffffff\"));\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            for (j = 0; j<this.props.boardSize; j++) {\r\n              boardRow.push(this.renderSquare(i*this.props.boardSize+j, \"#ffffff\"));\r\n            }\r\n          }\r\n        }\r\n\r\n        rowArr.push(<div className=\"board-row\">{boardRow}</div>)\r\n      }\r\n\r\n      return (\r\n        <div>\r\n            {rowArr}\r\n        </div>\r\n      );\r\n    }\r\n}\r\n  \r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      boardSize: 10,\r\n      winSize: 5,\r\n      history: [\r\n        {\r\n          squares: Array(49).fill(null)\r\n        }\r\n      ],\r\n      moveArr: [],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      colArr: [{squares: Array(49).fill(0)}],\r\n      rowArr: [{squares: Array(49).fill(0)}],\r\n      diagArr: [{squares: Array(49).fill(0)}],\r\n      antidiagArr: [{squares: Array(49).fill(0)}],\r\n    };\r\n\r\n    this.handleChangeBoardSize = this.handleChangeBoardSize.bind(this);\r\n    this.handleSubmitBoardSize = this.handleSubmitBoardSize.bind(this);\r\n    this.handleChangeWinSize = this.handleChangeWinSize.bind(this);\r\n    this.handleSubmitWinSize = this.handleSubmitWinSize.bind(this);\r\n  }\r\n\r\n  handleChangeWinSize(event) {\r\n    this.setState({\r\n      winSize: parseInt(event.target.value),\r\n    });\r\n  }\r\n\r\n  handleSubmitWinSize(event) {\r\n    alert('You now need ' + parseInt(this.state.winSize) + ' consecutive squares to win!!!');\r\n    event.preventDefault();\r\n  }\r\n\r\n  handleChangeBoardSize(event) {\r\n    this.setState({\r\n      boardSize: parseInt(event.target.value),\r\n    });\r\n  }\r\n\r\n  handleSubmitBoardSize(event) {\r\n    this.updateGameSize(this.state.boardSize);\r\n    event.preventDefault();\r\n  }\r\n\r\n  updateGameSize(boardSize) {\r\n    this.setState({\r\n      history: [\r\n        {\r\n          squares: Array(boardSize*boardSize).fill(null)\r\n        }\r\n      ],\r\n      moveArr: [],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      colArr: [{squares: Array(boardSize*boardSize).fill(0)}],\r\n      rowArr: [{squares: Array(boardSize*boardSize).fill(0)}],\r\n      diagArr: [{squares: Array(boardSize*boardSize).fill(0)}],\r\n      antidiagArr: [{squares: Array(boardSize*boardSize).fill(0)}],\r\n    })\r\n  }\r\n    \r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    const moveArr = this.state.moveArr.slice(0, this.state.stepNumber + 1);\r\n    const winSize = this.state.winSize;\r\n\r\n    const rowArr = this.state.rowArr.slice(0, this.state.stepNumber + 1);\r\n    const rowSquares = rowArr[rowArr.length - 1].squares.slice();\r\n    const colArr = this.state.colArr.slice(0, this.state.stepNumber + 1);\r\n    const colSquares = colArr[colArr.length - 1].squares.slice();\r\n    const diagArr = this.state.diagArr.slice(0, this.state.stepNumber + 1);\r\n    const diagSquares = diagArr[diagArr.length - 1].squares.slice();\r\n    const antidiagArr = this.state.antidiagArr.slice(0, this.state.stepNumber + 1);\r\n    const antiDiagSquares = antidiagArr[antidiagArr.length - 1].squares.slice();\r\n\r\n    if (calcWinner(squares, rowSquares, colSquares, diagSquares, antiDiagSquares, winSize) !== null) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.addInRow(squares, rowSquares, i, winSize, this.state.boardSize);\r\n    this.addInCol(squares, colSquares, i, winSize, this.state.boardSize);\r\n    this.addInDiag(squares, diagSquares, i, winSize, this.state.boardSize);\r\n    this.addInAntiDiag(squares, antiDiagSquares, i, winSize, this.state.boardSize);\r\n\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      moveArr: moveArr.concat(i),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n      rowArr: rowArr.concat([\r\n        {\r\n          squares: rowSquares\r\n        }\r\n      ]),\r\n      colArr: colArr.concat([\r\n        {\r\n          squares: colSquares\r\n        }\r\n      ]),\r\n      diagArr: diagArr.concat([\r\n        {\r\n          squares: diagSquares\r\n        }\r\n      ]),\r\n      antidiagArr: antidiagArr.concat([\r\n        {\r\n          squares: antiDiagSquares\r\n        }\r\n      ]),\r\n    });\r\n  }\r\n  \r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n      winState: -1\r\n    });\r\n  }\r\n\r\n  addInRow(boardSquares, rowSquares, index, winSize, boardSize) {\r\n    let rootIndex = index - winSize + 1;\r\n    let rowIndex = Math.floor(index/boardSize) * boardSize;\r\n  \r\n    if (rootIndex < rowIndex)\r\n      rootIndex = rowIndex;\r\n  \r\n    let i = 0;\r\n    if (boardSquares[index] === 'X') {\r\n      for (i = rootIndex; i <= index; i++) {\r\n        rowSquares[i] += 1;\r\n      }\r\n    } else {\r\n      for (i = rootIndex; i <= index; i++) {\r\n        rowSquares[i] -= 1;\r\n      }\r\n    }\r\n\r\n    console.log(rootIndex + ' ' + rowSquares[rootIndex]);\r\n  }\r\n  \r\n  addInCol(boardSquares, colSquares, index, winsize, boardSize) {\r\n    let rootIndex = index - boardSize * (winsize - 1);\r\n  \r\n    if (rootIndex < 0)\r\n      rootIndex = 0 + (index % boardSize);\r\n  \r\n    let i = 0;\r\n    if (boardSquares[index] === 'X') {\r\n      for (i = rootIndex; i <= index; i = i + boardSize) {\r\n        colSquares[i] += 1;\r\n      }\r\n    } else {\r\n      for (i = rootIndex; i <= index; i = i + boardSize) {\r\n        colSquares[i] -= 1;\r\n      }\r\n    }\r\n\r\n    // console.log(rootIndex + ' ' + colSquares[rootIndex]);\r\n    // console.log(colSquares[rootIndex]);\r\n  }\r\n\r\n  addInDiag(boardSquares, diagSquares, index, winSize, boardSize) {\r\n    let weight = winSize - 1;\r\n\r\n    if (index - weight < Math.floor(index/boardSize) * boardSize) {\r\n      weight = index - Math.floor(index/boardSize) * boardSize;\r\n    }\r\n\r\n    if (index - boardSize * weight < 0) {\r\n      weight = Math.floor(index/boardSize);\r\n    }\r\n\r\n    let rootIndex = index - boardSize * weight - weight;\r\n\r\n    let i = 0;\r\n    if (boardSquares[index] === 'X') {\r\n      for (i = rootIndex; i <= index; i = i + boardSize + 1) {\r\n        diagSquares[i] += 1;\r\n      }\r\n    } else {\r\n      for (i = rootIndex; i <= index; i = i + boardSize + 1) {\r\n        diagSquares[i] -= 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  addInAntiDiag(boardSquares, diagSquares, index, winSize, boardSize) {\r\n    let weight = winSize - 1;\r\n\r\n    if (index + weight > (Math.floor(index/boardSize) + 1) * boardSize - 1) {\r\n      weight = (Math.floor(index/boardSize) + 1) * boardSize - index - 1;\r\n    }\r\n\r\n    if (index - boardSize * weight < 0) {\r\n      weight = Math.floor(index/3);\r\n    }\r\n\r\n    let rootIndex = index - boardSize * weight + weight;\r\n\r\n    let i = 0;\r\n    if (boardSquares[index] === 'X') {\r\n      for (i = rootIndex; i <= index; i = i + boardSize - 1) {\r\n        diagSquares[i] += 1;\r\n      }\r\n    } else {\r\n      for (i = rootIndex; i <= index; i = i + boardSize - 1) {\r\n        diagSquares[i] -= 1;\r\n      }\r\n    }\r\n\r\n    // console.log(rootIndex + ' ' + diagSquares[rootIndex]);\r\n  }\r\n    \r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const rowSquares = this.state.rowArr[this.state.stepNumber].squares;\r\n    const colSquares = this.state.colArr[this.state.stepNumber].squares;\r\n    const diagSquares = this.state.diagArr[this.state.stepNumber].squares;\r\n    const antiDiagSquares = this.state.antidiagArr[this.state.stepNumber].squares;\r\n    const winner = calcWinner(current.squares, rowSquares, colSquares, diagSquares, antiDiagSquares, this.state.winSize);\r\n\r\n    const winIndex = checkWinIndex(current.squares, rowSquares, colSquares, diagSquares, antiDiagSquares, this.state.winSize);\r\n    const winState = checkWinState(current.squares, rowSquares, colSquares, diagSquares, antiDiagSquares, this.state.winSize);\r\n\r\n\r\n    const moves = history.map((step, move) => {\r\n      const index = this.state.moveArr[move - 1];\r\n      const row = Math.floor(index/this.state.boardSize) + 1;\r\n      const col = index - Math.floor(index/this.state.boardSize)*this.state.boardSize + 1;\r\n      const moveCheck = (this.state.stepNumber === move) ? true : false;\r\n\r\n      const desc = move ?\r\n        'Go to move #' + move + ' (' + (row) + ',' + (col) + ')':\r\n        'Go to game start';\r\n\r\n      return (\r\n        <li key={move} style={moveCheck ? {fontWeight:\"bold\"} : {fontWeight:\"normal\"}}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n    } else if (isDraw(current.squares)) {\r\n      status = \"Draw!!!\";\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    } \r\n\r\n    return (\r\n      <div>\r\n        <div className=\"game-input\">\r\n          <form onSubmit={this.handleSubmitBoardSize}>\r\n            <label>\r\n              Board Size: \r\n              <input type=\"number\" value={this.state.boardSize} onChange={this.handleChangeBoardSize}/>\r\n            </label>\r\n            <input type=\"submit\" value=\"Submit\"/>\r\n          </form>\r\n          <form onSubmit={this.handleSubmitWinSize}>\r\n            <label>\r\n              Win Size: \r\n              <input type=\"number\" value={this.state.winSize} onChange={this.handleChangeWinSize}/>\r\n            </label>\r\n            <input type=\"submit\" value=\"Submit\"/>\r\n          </form>\r\n        </div>\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              squares={current.squares}\r\n              onClick={i => this.handleClick(i)}\r\n              boardSize={this.state.boardSize}\r\n              winState={winState}\r\n              winIndex={winIndex}\r\n              winSize={this.state.winSize}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// function calculateWinner(squares) {\r\n//     const lines = [\r\n//         [0, 1, 2],\r\n//         [3, 4, 5],\r\n//         [6, 7, 8],\r\n//         [0, 4, 8],\r\n//         [2, 4, 6],\r\n//         [0, 3, 6],\r\n//         [1, 4, 7],\r\n//         [2, 5, 8],\r\n//     ];\r\n\r\n//     for (let i=0; i<lines.length; i++) {\r\n//         const [a,b,c] = lines[i]\r\n//         if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\r\n//             return squares[a];\r\n//     }\r\n\r\n//     return null;\r\n// }\r\n\r\nfunction calcWinner(boardSquares, rowSquares, colSquares, diagSquares, antidiagArr, winSize) {\r\n  for (var i = 0; i < boardSquares.length; i++) {\r\n    if (Math.abs(rowSquares[i]) === winSize) {\r\n      return boardSquares[i];\r\n    }\r\n\r\n    if (Math.abs(colSquares[i]) === winSize) {\r\n      return boardSquares[i];\r\n    }\r\n\r\n    if (Math.abs(diagSquares[i]) === winSize) {\r\n      return boardSquares[i];\r\n    }\r\n\r\n    if (Math.abs(antidiagArr[i]) === winSize) {\r\n      return boardSquares[i];\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction checkWinIndex(boardSquares, rowSquares, colSquares, diagSquares, antidiagArr, winSize) {\r\n  for (var i = 0; i < boardSquares.length; i++) {\r\n    if (Math.abs(rowSquares[i]) === winSize) {\r\n      return i;\r\n    }\r\n\r\n    if (Math.abs(colSquares[i]) === winSize) {\r\n      return i;\r\n    }\r\n\r\n    if (Math.abs(diagSquares[i]) === winSize) {\r\n      return i;\r\n    }\r\n\r\n    if (Math.abs(antidiagArr[i]) === winSize) {\r\n      return i;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\nfunction checkWinState(boardSquares, rowSquares, colSquares, diagSquares, antidiagArr, winSize) {\r\n  for (var i = 0; i < boardSquares.length; i++) {\r\n    if (Math.abs(rowSquares[i]) === winSize) {\r\n      return 0;\r\n    }\r\n\r\n    if (Math.abs(colSquares[i]) === winSize) {\r\n      return 1;\r\n    }\r\n\r\n    if (Math.abs(diagSquares[i]) === winSize) {\r\n      return 2;\r\n    }\r\n\r\n    if (Math.abs(antidiagArr[i]) === winSize) {\r\n      return 3;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n}\r\n\r\nfunction isDraw(boardSquares) {\r\n  for (let i = 0; i < boardSquares.length; i++) {\r\n    if (boardSquares[i] === null) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n  \r\n// ========================================\r\n  \r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}